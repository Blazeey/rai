// Code generated by go-bindata.
// sources:
// rai_config.yml
// DO NOT EDIT!

package cmd

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data, name string) ([]byte, error) {
	gz, err := gzip.NewReader(strings.NewReader(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _rai_configYml = "\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x94\x49\x93\xaa\x3e\x14\xc5\xf7\x7c\x8a\xec\x2d\x5b\x71\x42\xa8\x72\x81\x13\x6d\xff\x71\x56\x1c\x36\x54\x80\x08\x61\x0a\x64\x00\xf1\xd3\xff\x0b\xdb\xee\xd7\xef\x55\x2f\x6f\xae\xb9\xe7\xe7\x39\xb9\xc0\x2c\xd3\x24\x00\x52\x98\x20\x0d\x50\x88\x25\x00\x0a\x44\x1d\xc2\x90\x06\x6e\x30\x66\x48\x02\xc0\x43\x8e\xf0\xbf\x4a\x58\xb2\xfa\x02\x74\x5d\xc4\x98\x1d\xa1\xca\xc6\x9e\x06\x46\x23\x7d\xb6\xef\x76\x46\xa3\xc6\x6a\x13\xae\x70\x39\xe1\x87\x55\xb1\x3c\xfa\x6a\x6f\xdd\xda\x58\xc6\x7a\xe3\xca\xab\xc1\xec\x3e\xbe\x2b\x66\xf5\xe8\x1e\x8c\x9d\x58\xe4\xd6\x2d\x9f\x93\x8b\xd8\xad\x66\xb1\xec\x47\xd7\x72\x24\x01\xc0\x90\x4b\x11\xb7\xff\x4c\xff\x31\x9a\xa4\xe7\x5d\x9e\x59\x3c\x46\xce\xf9\xd4\xf0\x56\x7d\xc8\x8b\x30\xbb\x1a\xa2\x5a\xbd\x0f\xb3\x47\xa4\x4f\x15\x7e\x57\x3c\x3c\x09\x55\x9a\x8e\xab\xb3\xda\x18\xdf\xe3\xd9\xde\x92\x51\x40\x88\x32\x55\xc6\x9c\x4c\x27\xd3\x9b\xd2\x15\xe6\xc5\xca\xcf\xd3\x6d\xe1\xad\xf3\xfe\x07\x31\x55\x5d\x9f\x7b\x0b\x2a\x01\x40\x91\x8f\x49\xaa\x01\xc1\x9a\x08\x32\xde\x94\x6b\x24\xce\x6a\x1e\x22\x52\xae\x01\xb9\xd3\x91\xbb\xed\x8e\xd2\x1e\xf6\x06\xaf\x1e\x25\xf1\xb7\x75\x5f\xb5\xed\x09\x0a\x39\x26\xa9\xcd\x90\x4b\x52\x8f\x69\x40\xee\x27\x12\xe3\x84\xa2\xda\xbd\x8c\x92\x02\x7b\x88\x6a\x80\x75\x25\x00\x1c\xc8\x90\x2d\x68\xac\x81\x80\xf3\x4c\x6b\xb5\x58\xf7\x0d\x26\xf0\x41\x52\x58\xb2\x37\x97\x24\x4f\xc3\x63\x0d\x64\xc2\x89\xb1\xdb\xa4\x08\x7a\x92\x1b\x63\x94\xf2\x7f\xc3\x13\x59\x4c\xa0\x67\x3b\xc2\x8d\x10\xd7\xc0\x0d\xc7\x88\xbd\x51\x88\x9b\x19\x25\x21\x72\xf9\x6b\xda\x57\x5f\x30\x44\x3d\xc8\xe1\xf3\x08\xc7\x9e\x5d\x5f\x78\xce\xb2\x9f\x75\xfd\x9f\x84\x93\x60\x6e\x53\x94\x0b\x4c\x51\x82\x52\xfe\x7c\x00\x00\x34\x01\x45\x19\xa1\xfc\x2d\xf3\x6e\x12\x00\x21\x71\xec\x5c\x20\x81\xec\x6f\x1e\x1b\x26\xde\xa0\x57\xc3\xa7\x30\xae\x38\x76\x5f\x91\x1e\xf5\xa6\xdc\x56\xfb\x1d\x45\x69\x0f\x9b\xb2\x54\x03\xd4\x16\xd4\x63\x51\xea\x65\x04\xff\xd0\xf0\x9c\x5f\xf0\x6b\xec\x6f\x95\xe6\xa7\x13\xb5\xad\x90\xb1\x92\xd0\x9f\xef\x71\x73\x90\xc7\x3b\x6b\xf9\x58\x86\x6d\xf5\xbe\x6d\x05\xea\xfa\x5a\xb4\x8f\x25\xc9\x33\xa3\xab\x9b\xdd\xb6\x79\xff\xd8\x6c\xfa\xb7\xd0\x4f\x7b\xfb\xc3\xf6\x66\x18\xba\x9e\x9b\x86\x7e\xe1\x59\x76\x88\xf8\x80\x76\xfd\x6b\x31\xae\xa2\x91\x04\x05\x0f\xfe\x8e\xae\x3e\x69\xd7\xeb\x41\x12\x88\xd3\x27\xca\x17\xe5\xb3\xf5\x62\xfd\xa4\xfb\x7b\x4b\xfa\xea\xcc\x1f\x34\x82\xf9\xf4\x16\x11\x74\x9d\x44\xdb\x62\x7f\x24\x6d\xe6\x4f\xd8\xbb\x2b\xe4\xb1\xba\x24\x86\xaf\xaf\xa2\xb2\x7a\x7c\xe4\x3e\xb7\x6e\x5b\xaa\x2c\x8c\x01\xbe\x34\x60\x69\x0c\xa1\xb3\xdd\x1c\x93\x14\x42\x3d\xff\xa0\x97\x9b\xc3\xef\xeb\x3f\x32\x9f\x0b\xf4\x43\xaa\x93\xad\x03\x1a\x74\xc9\x4e\x67\x0d\x32\x08\xe4\xab\x12\xb9\xcb\x5e\x39\x30\xb3\x79\x68\x0e\x94\x46\xd8\x29\xc6\x87\xa5\x91\xed\x55\x39\xe4\xe3\x75\xaf\x53\xfe\x67\x84\xd1\xe2\x78\x98\xf0\xfc\x28\xa2\x65\xd5\xf9\xaf\xd5\xb7\x92\x87\x29\x77\xfa\x17\x57\x6c\xd2\x12\x5b\xce\x15\x97\xe7\x03\x4d\xe8\x70\xdd\xf2\x4f\xc3\xf7\xd6\x74\x6d\xcc\x4e\x93\x70\xd1\xf7\x72\x17\xbe\x07\x0b\xb6\x9c\x5b\xb3\xd3\xa1\x6f\xac\x9c\x52\x6e\x25\xe4\xee\xf4\xd8\xbc\x37\x92\x32\xe1\x30\xe1\xfc\x9a\xf3\x67\xeb\xdf\xac\xb5\x41\x57\x51\x7f\x4f\x76\x9f\x5e\x1a\x67\xb5\x2a\x0e\x59\x61\xed\x4e\xa4\x11\xe4\xb9\x3c\x0e\x45\x36\x2c\x8a\xcb\x8c\x4f\x8f\x3b\x97\xad\x3b\xe5\x68\x24\xc5\xc4\xf7\x11\xad\x75\x62\x54\xa0\x58\xfb\xfc\x9e\x49\x00\x04\x84\x44\xdf\xfa\x11\x4a\x31\xc3\xec\x55\xb1\x8a\xc5\xc4\x7f\x15\x31\xf1\x1f\xf5\x94\x47\xfd\x5b\x4e\x22\x94\x6a\x60\x9d\x98\x8f\x80\x2e\xcf\xce\x8a\xbb\x8b\xb4\xd8\xe9\xbb\xe5\xa9\xc2\x4e\xf5\xfe\x6e\x9a\xe1\xfc\x8a\x25\xe9\xff\x00\x00\x00\xff\xff\x2c\x8a\xfb\x5d\x5a\x05\x00\x00"

func rai_configYmlBytes() ([]byte, error) {
	return bindataRead(
		_rai_configYml,
		"rai_config.yml",
	)
}

func rai_configYml() (*asset, error) {
	bytes, err := rai_configYmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "rai_config.yml", size: 1370, mode: os.FileMode(420), modTime: time.Unix(1554397848, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"rai_config.yml": rai_configYml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"rai_config.yml": &bintree{rai_configYml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

